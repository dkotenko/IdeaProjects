type: edu
custom_name: stage4
files:
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import tictactoe.Main;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;

    enum FieldState {
        X, O, FREE;

        static FieldState get(char symbol) {
            switch (symbol) {
                case 'X': return X;
                case 'O': return O;
                case ' ':
                case '_':
                    return FREE;
                default: return null;
            }
        }
    }

    class TicTacToeField {

        final FieldState[][] field;

        TicTacToeField(FieldState[][] field) {
            this.field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    this.field[row][col] = field[row][col];
                }
            }
        }

        TicTacToeField(String str) {
            field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    field[row][col] =
                        FieldState.get(str.charAt(((2 - row) * 3 + col)));
                }
            }
        }

        boolean equalTo(TicTacToeField other) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean hasNextAs(TicTacToeField other) {
            boolean improved = false;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        if (field[i][j] == FieldState.FREE && !improved) {
                            improved = true;
                        }
                        else {
                            return false;
                        }
                    }
                }
            }
            return improved;
        }

        boolean isCloseTo(TicTacToeField other) {
            return equalTo(other)
                || hasNextAs(other)
                || other.hasNextAs(this);
        }

        static TicTacToeField parse(String fieldStr) {

            try {
                List<String> lines = fieldStr
                    .lines()
                    .map(String::strip)
                    .filter(e ->
                        e.startsWith("|")
                            && e.endsWith("|"))
                    .collect(Collectors.toList());

                for (String line : lines) {
                    if (line.length() != 9) {
                        throw new WrongAnswer("Line of Tic-Tac-Toe " +
                            "field should be 9 characters long\n" +
                            "found " + line.length() + " characters in \"" + line + "\"");
                    }
                    for (char c : line.toCharArray()) {
                        if (c != 'X'
                            && c != 'O'
                            && c != '|'
                            && c != ' '
                            && c != '_') {
                            return null;
                        }
                    }
                }

                FieldState[][] field = new FieldState[3][3];

                int y = 2;
                for (String line : lines) {
                    char[] cols = new char[] {
                        line.charAt(2),
                        line.charAt(4),
                        line.charAt(6)
                    };

                    int x = 0;
                    for (char c : cols) {
                        FieldState state = FieldState.get(c);
                        if (state == null) {
                            return null;
                        }
                        field[y][x] = state;
                        x++;
                    }
                    y--;
                }

                return new TicTacToeField(field);
            } catch (Exception ex) {
                return null;
            }
        }


        static List<TicTacToeField> parseAll(String output) {
            List<TicTacToeField> fields = new ArrayList<>();

            List<String> lines = output
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String candidateField = "";
            boolean insideField = false;
            for (String line : lines) {
                if (line.contains("----") && !insideField) {
                    insideField = true;
                    candidateField = "";
                } else if (line.contains("----") && insideField) {
                    TicTacToeField field = TicTacToeField.parse(candidateField);
                    if (field != null) {
                        fields.add(field);
                    }
                    insideField = false;
                }

                if (insideField && line.startsWith("|")) {
                    candidateField += line + "\n";
                }
            }

            return fields;
        }

    }


    class Clue {
        int x, y;
        String input;
        Clue(String input, int x, int y) {
            this.input = input;
            this.x = x;
            this.y = y;
        }
    }

    public class TicTacToeTest extends StageTest<Clue> {
        public TicTacToeTest() {
            super(Main.class);
        }

        static final String[] inputs = new String[] {
            "1 1", "1 2", "1 3",
            "2 1", "2 2", "2 3",
            "3 1", "3 2", "3 3"
        };

        String iterateCells(String initial) {
            int index = -1;
            for (int i = 0; i < inputs.length; i++) {
                if (initial.equals(inputs[i])) {
                    index = i;
                    break;
                }
            }
            if (index == -1) {
                return "";
            }
            String fullInput = "";
            for (int i = index; i < index + 9; i++) {
                fullInput += inputs[i % inputs.length] + "\n";
            }
            return fullInput;
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            int i = 0;

            for (String startField : new String[] {
                "_XXOO_OX_",
                "_________",
                "X_X_O____"
            }) {

                for (String input : inputs) {
                    String fullInput = iterateCells(input);

                    String[] strNums = input.split("\\s+");
                    int x = Integer.parseInt(strNums[0]);
                    int y = Integer.parseInt(strNums[1]);

                    if (i % 2 == 1) {
                        // mix with incorrect data
                        fullInput = "4 " + i + "\n" + fullInput;
                    }

                    tests.add(new TestCase<Clue>()
                        .setInput(startField + "\n" + fullInput)
                        .setAttach(new Clue(startField, x, y)));

                    i++;
                }

            }

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<TicTacToeField> fields = TicTacToeField.parseAll(reply);

            if (fields.size() != 2) {
                return new CheckResult(false,
                    "Can't find two fields inside output");
            }

            TicTacToeField curr = fields.get(0);
            TicTacToeField next = fields.get(1);

            TicTacToeField correctCurr = new TicTacToeField(clue.input);
            TicTacToeField correctNext = new TicTacToeField(correctCurr.field);

            String[] numInputs = iterateCells(clue.x + " " + clue.y).split("\n");
            for (String input : numInputs) {
                String[] strNums = input.split(" ");
                int x = Integer.parseInt(strNums[0]);
                int y = Integer.parseInt(strNums[1]);
                if (correctNext.field[y - 1][x - 1] == FieldState.FREE) {
                    correctNext.field[y - 1][x - 1] = FieldState.X;
                    break;
                }
            }

            if (!curr.equalTo(correctCurr)) {
                return new CheckResult(false,
                    "The first field is not equal to the input field");
            }

            if (!next.equalTo(correctNext)) {
                return new CheckResult(false,
                    "The first field is correct, but the second is not");
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/Field.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Map;

    public class Field {
        private String [] cells = new String[9];
        private States state = States.NOT_FINISHED;

        private enum States {NOT_FINISHED, DRAW, X_WINS, O_WINS, IMPOS};
        Map<States, String> dict = Map.of(
                States.NOT_FINISHED, "Game not finished",
                States.DRAW, "Draw",
                States.X_WINS, "X wins",
                States.O_WINS, "O wins",
                States.IMPOS, "Impossible");

        public String getCell(int y, int x)
        {
            int number = (y - 1) * 3 + (x - 1);
            return cells[number];
        }

        public void setCell(int y, int x, String c)
        {
            int number = (y - 1) * 3 + (x - 1);
            cells[number] = c;
        }

        private void setState()
        {
            if (Math.abs(getCharCount("X") - getCharCount("O")) > 1) {
                this.state = States.IMPOS;
            }
            else if (isWinner("X"))
            {
                if (isWinner("O"))
                    this.state = States.IMPOS;
                else
                    this.state = States.X_WINS;
            }
            else if (isWinner("O"))
                this.state = States.O_WINS;
            else if (getCharCount("_") == 0)
                this.state = States.DRAW;
        }

        public void setField(String[] chars)
        {
            cells = chars.clone();
            setState();


        }

        private int getCharCount(String c)
        {
            int counter = 0;
            int i = 0;
            while (i < this.cells.length)
            {
                if (this.cells[i].equals(c))
                    counter++;
                i++;
            }
            return counter;
        }

        private boolean isWinner(String c)
        {
            if (getCharCount(c) < 3)
                return false;
            if (c.equals(cells[4])) {
                if (cells[0].equals(cells[4]) && cells[4].equals(cells[8]))
                    return true;
                if (cells[2].equals(cells[4]) && cells[4].equals(cells[6]))
                    return true;
                if (cells[1].equals(cells[4]) && cells[4].equals(cells[7]))
                    return true;
                if (cells[3].equals(cells[4]) && cells[4].equals(cells[5]))
                    return true;
            }
            if (c.equals(cells[0])) {
                if (cells[0].equals(cells[1]) && cells[1].equals(cells[2]))
                    return true;
                if (cells[0].equals(cells[3]) && cells[3].equals(cells[6]))
                    return true;
            }
            if (c.equals(cells[8])) {
                if (cells[8].equals(cells[5]) && cells[5].equals(cells[2]))
                    return true;
                if (cells[8].equals(cells[7]) && cells[7].equals(cells[6]))
                    return true;
            }
            return false;
        }


        public void printField()
        {
            String dash = "-";
            String line = dash.repeat(9);
            System.out.println(line);
            System.out.printf("| %s %s %s |\n",
                    this.getCell(1,1), this.getCell(1,2), this.getCell(1,3));
            System.out.printf("| %s %s %s |\n",
                    this.getCell(2,1), this.getCell(2,2), this.getCell(2,3));
            System.out.printf("| %s %s %s |\n",
                    this.getCell(3,1), this.getCell(3,2), this.getCell(3,3));
            System.out.println(line);
        }

        public void printState()
        {
            System.out.println(this.dict.get(this.state));
        }
    }
  learner_created: false
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;


    import java.util.Scanner;

    public class Main {


        public static void main(String[] args) {
            Field field = new Field();
            Scanner scanner = new Scanner(System.in);
            boolean running = true;

            while (running)
            {
                System.out.print("Enter cells: ");
                field.setField(readInput(scanner.next()));
                field.printField();
                field.printState();
                running = false;
            }




        }

        private static String[] readInput(String input)
        {
            return input.split("");
        }

        private void printField(Field field)
        {


        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/48/stages/258/implement
status: Solved
record: 3
